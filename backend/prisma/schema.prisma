// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String  @id @default(cuid())
  username       String  @unique @db.VarChar(30)
  name           String? @db.VarChar(50)
  email          String? @unique @db.VarChar(100)
  password       String? @db.VarChar(100)
  address        String? @db.Text
  profilePicture String? @db.Text
  role           ROLE    @default(USER)
  refresh_token  String? @db.Text

  ratedDestinations     UsersRateDestinations[]
  favoritedDestinations UsersFavoriteDestinations[]
  favoritedStories      UsersFavoriteStories[]
  favoritedCultures     UsersFavoriteCultures[]
  commentedDestinations UsersCommentDestinations[]
  commentedStories      UsersCommentStories[]
  commentedCultures     UsersCommentCultures[]
  stories               Story[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Story {
  id        String   @id @default(cuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId           String
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoritedByUsers UsersFavoriteStories[]
  commentedByUsers UsersCommentStories[]
  images           Image[]

  @@map("stories")
}

model Destination {
  id           String  @id @default(cuid())
  name         String  @db.VarChar(100)
  slug         String  @unique @db.VarChar(200)
  description  String  @db.Text
  cover        String? @db.Text
  address      String  @db.Text
  latitude     String  @db.Text
  longitude    String  @db.Text
  price        Int     @default(0)
  districtSlug String
  categorySlug String

  district         District                    @relation(fields: [districtSlug], references: [slug], onDelete: Cascade)
  category         Category                    @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  favoritedByUsers UsersFavoriteDestinations[]
  commentedByUsers UsersCommentDestinations[]
  ratedByUsers     UsersRateDestinations[]
  images           Image[]
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt

  @@map("destinations")
}

model Culture {
  id               String                  @id @default(cuid())
  name             String                  @db.VarChar(200)
  slug             String                  @unique
  address          String?                 @db.Text
  cover            String?                 @db.Text
  districtSlug     String?
  categorySlug     String?
  description      String                  @db.Text
  body             String?                 @db.Text
  district         District?               @relation(fields: [districtSlug], references: [slug], onDelete: Cascade)
  category         Category?               @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  favoritedByUsers UsersFavoriteCultures[]
  commentedByUsers UsersCommentCultures[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  images           Image[]

  @@map("cultures")
}

model District {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(50)
  slug        String  @unique @db.VarChar(100)
  cover       String? @db.Text
  description String  @db.Text

  destinations Destination[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cultures     Culture[]

  @@map("districts")
}

model Category {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(50)
  slug         String        @unique @db.VarChar(100)
  cover        String?       @db.Text
  destinations Destination[]
  description  String        @db.Text

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  cultures  Culture[]

  @@map("categories")
}

model Image {
  id              String  @id @default(cuid())
  uri             String  @db.Text
  destinationSlug String?
  storySlug       String?
  cultureSlug     String?

  destination Destination? @relation(fields: [destinationSlug], references: [slug], onDelete: Cascade)
  story       Story?       @relation(fields: [storySlug], references: [slug], onDelete: Cascade)
  culture     Culture?     @relation(fields: [cultureSlug], references: [slug], onDelete: Cascade)
  description String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("images")
}

// TODO: PIVOT TABLE
model UsersFavoriteDestinations {
  username        String
  user            User        @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  destinationSlug String
  destination     Destination @relation(fields: [destinationSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@id([username, destinationSlug])
  @@map("user_favorited_destination")
}

model UsersFavoriteStories {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, storyId])
  @@map("user_favorited_story")
}

model UsersFavoriteCultures {
  username    String
  user        User     @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  cultureSlug String
  culture     Culture  @relation(fields: [cultureSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([username, cultureSlug])
  @@map("user_favorited_culture")
}

model UsersCommentStories {
  username  String
  storySlug String
  user      User     @relation(fields: [username], references: [username], onDelete: Cascade)
  story     Story    @relation(fields: [storySlug], references: [slug], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([username, storySlug])
  @@map("users_comment_stories")
}

model UsersCommentDestinations {
  id              String                     @id @default(cuid())
  username        String
  destinationSlug String
  parentId        String?
  body            String                     @db.Text
  parent          UsersCommentDestinations?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  childs          UsersCommentDestinations[] @relation("ParentChild")
  user            User                       @relation(fields: [username], references: [username], onDelete: Cascade)
  destination     Destination                @relation(fields: [destinationSlug], references: [slug], onDelete: Cascade)
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt

  @@map("users_comment_destinations")
}

model UsersCommentCultures {
  id          String                 @id @default(cuid())
  username    String
  cultureSlug String
  parentId    String?
  body        String                 @db.Text
  parent      UsersCommentCultures?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  childs      UsersCommentCultures[] @relation("ParentChild")
  user        User                   @relation(fields: [username], references: [username], onDelete: Cascade)
  culture     Culture                @relation(fields: [cultureSlug], references: [slug], onDelete: Cascade)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("users_comment_culture")
}

model UsersRateDestinations {
  username        String
  destinationSlug String
  rate            Float
  user            User        @relation(fields: [username], references: [username], onDelete: Cascade)
  destination     Destination @relation(fields: [destinationSlug], references: [slug], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@id([username, destinationSlug])
  @@map("users_rate_destinations")
}

enum ROLE {
  ADMIN
  USER
}
