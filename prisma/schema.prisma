// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// -------------------------

model Destination {
  id           String  @id @default(cuid())
  name         String  @db.VarChar(400)
  slug         String  @unique @db.Text
  description  String  @db.Text
  cover        String? @db.Text
  address      String  @db.Text
  latitude     String  @db.Text
  longitude    String  @db.Text
  price        Int     @default(0)
  districtSlug String
  categorySlug String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("destinations")
}

model Culture {
  id               String                  @id @default(cuid())
  name             String                  @db.VarChar(400)
  slug             String                  @unique @db.Text
  address          String?                 @db.Text
  cover            String?                 @db.Text
  description      String                  @db.Text
  body             String?                 @db.Text
  districtSlug     String?
  categorySlug     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cultures")
}

model Story {
  id        String   @id @default(cuid())
  slug      String   @unique @db.Text
  name      String   @db.VarChar(400)
  body String @db.Text
  cover String @db.Text
  description String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stories")
}

